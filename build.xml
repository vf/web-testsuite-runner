<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2010-2011 Vodafone Group Services GmbH
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
		http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<project name="web-testsuite" default="default">

	<description>
		Packages the jil-api-test widgets
	</description>
	
	<!-- include antcontrib to enable additional tasks like foreach or popertyregexp -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/util/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
<!-- 
	set some directories 
-->
	<!-- test runner source code -->
	<property name="dirs.src" location="${basedir}/src"/>
	
	<!-- tools -->
	<property name="dirs.tools" location="${basedir}/tools"/>

	<!-- util sources -->
	<property name="dirs.util-src" location="${dirs.src}/util"/>
	
	<!-- test sources -->
	<property name="dirs.test-src" location="${user.dir}"/>

	<!-- dist dir for built tests -->
	<property name="dirs.dist" location="${dirs.test-src}/dist"/>

	<!-- dist dir for built html tests -->
	<property name="dirs.dist-html" location="${dirs.dist}"/>
	
	<!-- dist dir for built test widgets -->
	<property name="dirs.dist-widget" location="${dirs.dist}"/>

	<!-- tmp files -->
	<property name="dirs.tmp" location="${dirs.test-src}/_tmp_" description="temporary folder to use, during build-process"/>

	<property name="defaults.buildtarget" value="-build-html"/>
	
<!-- 
	public targets
-->
	<target name="default" description="Builds a single test (if defined) or outputs a help message.">
		<if>
			<isset property="test"/>
			<then>
				<antcall target="build" inheritall="true"/>
			</then>
			<else>
				<antcall target="help"/>
			</else>
		</if>
	</target>
	
	<target name="help" description="Output a usage message.">
	<echo>
	HELP:
	=====
	    	  	
	Run from the tests directory with 
	    ant -f &lt;path/to/build.xml&gt; &lt;options&gt;
	    	  	
	However, the test source directory can be set manually via the 
	`dirs.test-src` property.
	    	  	
	
	Examples:
	=========
	
	Build a single test:
	    ant -f  &lt;path/to/build.xml&gt; -Dtest=&lt;testname&gt; (e.g. ant -Dtest=jil/File)
	
	Build all tests: ant all
	    ant -f  &lt;path/to/build.xml&gt; all
</echo>
	</target>

	<target name="all" description="This target builds widgets for all tests." depends="-collectTestNames">
		<echo level="info">### Building all tests ###</echo>
		<for list="${test.names}" param="test.name" delimiter=";">
			<sequential>
				<antcall target="build">
					<param name="test" value="@{test.name}"/>
				</antcall>
			</sequential>
		</for>
	</target>
	
	<target name="build">
		<echo level="info">### Building single test ###</echo>
		<!-- build util -->
		<if>
			<not><isset property="test" /></not>
			<then>
				<if>
					<isset property="util" />
					<then>
						<property name="test" value="${util}"/>
						<property name="testfile" location="${dirs.util-src}/${util}.js"/>
						<property name="script-src-prefix-path" value="util/"/>
						<property name="dist-filename-prefix" value="util-" />
					</then>
					<else>
						<antcall target="echoTestfiles" />
						<!-- fetch name of test to build -->
						<input addproperty="test" message="Build with which test? (Press Enter to build all tests)"/>
						<property name="testfile" location="${dirs.test-src}/${test}.js"/>
						<property name="script-src-prefix-path" value="tests/"/>
						<property name="dist-filename-prefix" value="test-" />
					</else>
				</if>
			</then>
			<else>
				<property name="testfile" location="${dirs.test-src}/${test}.js"/>
				<property name="script-src-prefix-path" value="tests/"/>
				<property name="dist-filename-prefix" value="test-" />
			</else>
		</if>
		<if>
			<not><equals arg1="${test}" arg2="" /></not>
			<then>
				<!-- check if .js-file for given test is available (fail if not)-->
				<available file="${testfile}" type="file" property="testfileAvailable" value="true"/>
				<fail unless="testfileAvailable" message="Test not found. Make sure, that the desired test is located in the '${dirs.test-src}' (or util in '${dirs.util-src}') directory."/>
				<antcall target="${defaults.buildtarget}" inheritall="true"/>
			</then>
			<else>
				<antcall target="all"/>
			</else>
		</if>
	</target>
	
	<target name="all-html">
		<antcall target="all">
			<param name="defaults.buildtarget" value="-build-html"/>
		</antcall>
	</target>
	
	<target name="all-widget">
		<antcall target="all">
			<param name="defaults.buildtarget" value="-build-widget"/>
		</antcall>
	</target>
	
	<target name="build-html">
		<antcall target="build">
			<param name="defaults.buildtarget" value="-build-html"/>
		</antcall>
	</target>
	
	<target name="build-widget">
		<antcall target="build">
			<param name="defaults.buildtarget" value="-build-widget"/>
		</antcall>
	</target>
	
    <!-- writes the available tests to the console -->
	<target name="echoTestfiles" depends="-collectTestNames">
		<echo>${line.separator}### Available tests ###${line.separator}</echo>
		<for list="${test.names}" param="test.name" delimiter=";">
			<sequential>
				<echo>@{test.name}</echo>
			</sequential>
		</for>
		<echo>${line.separator}</echo>
    </target>
	
	
<!--
	internal targets
-->
	<target 
		name="-build-html" 
		description="Builds the html files for a single test"
		depends="-specializeTemplates">		
		
		<!-- Create the whatever-test-name.html, by copying the index.html into it. -->
		<propertyregex 
			override="true" 
			property="_htmlDestFile" 
			input="${test}"
			defaultvalue="${test}"
			regexp="/" 
			replace="-" 
			global="true"/>
		<copy file="${dirs.test-src}/index.html" tofile="${dirs.test-src}/tests-${_htmlDestFile}.html"/>
		
		<!-- Copy test runner includes -->
		<copy todir="${dirs.test-src}/_testsuite_" preservelastmodified="true">
			<fileset dir="${dirs.src}/includes">
				<include name="css/**"/>
				<include name="img/**"/>
				<include name="js/**"/>
			</fileset>
		</copy>
	</target>
	
	<target name="-build-widget" 
		description="Builds a widget for a single test"
		depends="-build-html, -setFileNameForTest">
		<mkdir dir="${dirs.dist}"/>
		<zip destfile="${dirs.dist}/${test.filename}.wgt">
			<fileset dir="${dirs.test-src}">
				<include name="index.html"/>
				<include name="config.xml"/>
				<include name="_testsuite_/**"/>
				<include name="${test}.js"/>
			</fileset>
		</zip>
	</target>
		
	
	<target name="-collectTestNames">
		<fileset id="tests.contents" 
			dir="${dirs.test-src}/" 
			includes="**/*.js" 
			excludes="**/*.config.xml.js **/*.index.html.js **/_*.js _testsuite_/**" />
		<property name="test.names" refid="tests.contents"/>
		<propertyregex override="true" property="test.names" input="${test.names}" regexp="\.js" replace="" global="true"/>
		<propertyregex override="true" property="test.names" input="${test.names}" regexp="\\" replace="/" global="true"/>
	</target>

	<target name="-setFileNameForTest">
		<property name="test.filename" value="${dist-filename-prefix}${test}" />
		<propertyregex override="true" property="test.filename" input="${test.filename}" regexp="/" replace="-" global="true"/>
	</target>

	<target name="-specializeTemplates" depends="">
		<!--
			Do the E4X magic, which means throw index.html.tpl into a Rhino (js.jar) 
			and	let it create index.html.
		-->
		
		<!-- 
			index.html
		-->
		<property name="tpl.script.index" value="${testfile}" />
		<propertyregex
			override="true" 
			property="tpl.script.index" 
			input="${tpl.script.index}" 
			regexp="\.js$" 
			replace=".index.html.js"/>
		<available file="${tpl.script.index}" type="file" property="tpl.script.index.isAvailable" value="true"/>
		
		<!-- check if {test}.index.html.js-file for given test is available (use default if not)-->
		<if>
			<isset property="tpl.script.index.isAvailable" />
			<then>
				<property name="tpl.script.index.file" value="${tpl.script.index}"/>
			</then>
			<else>
				<property name="tpl.script.index.file" value="${dirs.src}/index.html.js"/>
			</else>
		</if>

		<java jar="${dirs.tools}/js.jar" fork="true">
			<!-- list all the js files here in the order they need to be loaded -->
			<arg line="-f ${dirs.tools}/js/console.js"/>
			<arg line="-f ${dirs.tools}/js/util.js"/>
			<arg line="-f ${dirs.tools}/js/config.js"/>
			<arg line="-f ${dirs.tools}/js/xmlHelper.js"/>
			<!--<arg value="src/tests/base/widget-update/update0.config.xml.js"/>-->
			<arg line="-f ${tpl.script.index.file}"/>
			<arg line="-f ${dirs.tools}/js/file.js"/>
			<arg line="${dirs.tools}/js/writeRenderedFile.js"/>
			
			<!--arguments passed to the Rhino-->
			<!-- template file -->
			<arg line="${dirs.src}/index.html.tpl"/>
			
			<!-- outfile -->
			<arg line="${dirs.test-src}/index.html"/>
			
			<!-- The JavaScript test file, e.g. /src/tests/base/window.js -->
			<arg line="${testfile}"/>
		</java>
		

		<!--
			config.xml
		-->

		<property name="tpl.script.config" value="${testfile}" />
		<propertyregex
			override="true" 
			property="tpl.script.config" 
			input="${tpl.script.config}" 
			regexp="\.js$" 
			replace=".config.xml.js"/>
		<available file="${tpl.script.config}" type="file" property="tpl.script.config.isAvailable" value="true"/>
		
		<!-- check if {test}.config.xml.js-file for given test is available (use default if not)-->
		<if>
			<isset property="tpl.script.config.isAvailable" />
			<then>
				<property name="tpl.script.config.file" value="${tpl.script.config}"/>
			</then>
			<else>
				<property name="tpl.script.config.file" value="${dirs.src}/config.xml.js"/>
			</else>
		</if>

		<java jar="tools/js.jar" fork="true">
			<!-- list all the js files here in the order they need to be loaded -->
			<arg line="-f tools/js/console.js"/>
			<arg line="-f tools/js/util.js"/>
			<arg line="-f tools/js/config.js"/>
			<arg line="-f tools/js/xmlHelper.js"/>
			<!--<arg value="src/tests/base/widget-update/update0.config.xml.js"/>-->
			<arg line="-f ${tpl.script.config.file}"/>
			<arg line="-f tools/js/file.js"/>
			<arg line="tools/js/writeRenderedFile.js"/>
			
			<!--arguments passed to the Rhino-->
			<!-- template file -->
			<arg line="${dirs.src}/config.xml.tpl"/>
			
			<!-- outfile -->
			<arg line="${dirs.test-src}/config.xml"/>
			
			<!-- The JavaScript test file, e.g. /src/tests/base/window.js -->
			<arg line="${testfile}"/>
		</java>
	</target>
	
</project>